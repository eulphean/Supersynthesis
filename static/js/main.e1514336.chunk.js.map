{"version":3,"sources":["svg/about.svg","stores/LightConfigStore.js","components/Websocket.js","components/CommonStyles.js","components/Navbar.js","components/Light.js","components/LightManager.js","components/MeshManager.js","components/BpmManager.js","components/WaveCanvas.js","components/BottomBar.js","components/App.js","index.js"],"names":["_g","LIGHT_TYPE","LIGHT_STATE","GROW_STATE","this","lightSubscribers","infoSubscribers","configIndex","bpm","lightConfig","maxLightHeight","prepareDefaultLightConfig","listener","push","filter","s","infoListeners","height","console","log","i","stateObject","lightType","lightState","growState","activeState","state","max","Math","floor","random","length","dbConfig","filterConfig","json","Date","payload","JSON","stringify","config","lightData","updateLightConfig","forEach","c","d","data","stateObj","siteURL","herokuURL","socket","io","reconnection","reconnectionDelay","reconnectionAttempts","Infinity","once","subscribe","bind","on","logTime","LightConfigStore","setPayloadFromDatabase","emit","getPayloadForDatabase","_excluded","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref","svgRef","title","props","createElement","width","viewBox","ref","id","transform","fill","fillRule","stroke","strokeWidth","ForwardRef","forwardRef","color","bgBlack","fgWhite","fontSize","extraSmall","kindaSmall","verySmall","small","big","veryBig","extraBig","huge","veryHuge","extraHuge","massive","veryMassive","extraMassive","enormous","veryEnormous","extraEnormous","insane","veryInsaane","extraInsane","gaia","veryGaia","extraGaia","padding","fontFamily","animation","rotate","Radium","keyframes","styles","container","display","flexDirection","justifyContent","alignItems","paddingLeft","paddingRight","backgroundColor","fbWhite","letterSpacing","iconContainer","marginTop","simpleRotation","animationName","icon","Navbar","aboutStyle","style","block","onClick","handleAbout","React","Component","Light","xPos","yPos","lightWidth","p5","pos","createVector","newX","getNewPos","topPos","bottomPos","lightColor","lightPointColor","curIdx","updateHeight","growIntervalId","setInterval","randomizeGrowState","isUserInteracting","isCurrentlyGrowing","noStroke","handleGrowState","getHeight","rect","canDraw","calcGrowState","getGrowState","r","int","setGrowState","curGrowthActive","curGrowState","curHeight","setHeightState","mapPos","map","circle","getHeightState","getDrawState","getLightState","curLightState","setLightState","setDrawState","onHeight","LightManager","lights","curTime","now","gliderIdx","direction","allLightsOff","timeOn","prepareLights","setMaxHeight","subscribeInfo","updateTimeOn","subscribeLights","updateLights","newBpm","getBpm","resetSystem","lightIncrement","l","meshEllipsePos","boundaryWidth","handleUserInteracting","handleUserNotInteracting","draw","light","dist","updateGrowState","top","isGrowing","bottom","isOn","updateDrawState","NUM_LIGHTS","turnOffAllLights","MeshManager","ellipsePos","mouseX","mouseY","containEllipse","drawLine","drawEllipse","strokeWeight","ellipse","startPoint","endPoint","opacity","weight","line","bpmManager","curBpm","bpmSubscribers","isInteracting","shouldAdd","sum","elapsedTime","v","sin","mapped","setBpm","sketch","lightManager","meshManager","setup","select","createCanvas","window","innerWidth","BpmManager","background","drawCenterLine","update","mousePressed","mouseReleased","margin","WaveCanvas","containerRef","createRef","sketchRef","myP5","current","position","left","right","lessBig","info","BottomBar","index","onInfoUpdate","states","onSend","idx","getConfigIndex","setState","event","stopPropagation","Websocket","commitLightConfigData","button","App","addEventListener","handleResize","isLandscape","isPortrait","saveEntry","t","innerHeight","ReactDOM","render","document","getElementById"],"mappings":"6HAAIA,E,kGCMSC,EACJ,MADIA,EAED,SAGCC,EACL,EADKA,EAEJ,EAGIC,EACH,EADGA,EAEH,EAFGA,EAGD,EAsOG,M,WAhOX,aAAe,oBAEXC,KAAKC,iBAAmB,GACxBD,KAAKE,gBAAkB,GAGvBF,KAAKG,YAAc,EACnBH,KAAKI,IAAM,IACXJ,KAAKK,YAAc,GAGnBL,KAAKM,eAAiB,EAGtBN,KAAKO,4B,mDAGT,SAAgBC,GAAW,IAAD,OACtBR,KAAKC,iBAAiBQ,KAAKD,GAK3B,OAJuB,WACnB,EAAKP,iBAAmB,EAAKA,iBAAiBS,QAAO,SAACC,GAAD,OAAOH,IAAaG,Q,2BAMjF,SAAcH,GAAW,IAAD,OACpBR,KAAKE,gBAAgBO,KAAKD,GAK1B,OAJuB,WACnB,EAAKI,cAAgB,EAAKV,gBAAgBQ,QAAO,SAACC,GAAD,OAAOH,IAAaG,Q,0BAM7E,SAAaE,GACTb,KAAKM,eAAiBO,I,uCAI1B,WACIC,QAAQC,IAAI,6BACZ,IAAK,IAAIC,EAAI,EAAGA,EA7CL,GA6CqBA,IAAK,CAEjC,IAAIC,EAAc,CACd,MAAS,CACL,IAAO,EACP,OAAU,GAEd,KAAQ,CACJ,KAAO,EACP,QAAU,GAEd,KAAQ,CACJ,IAAO,CACH,MAASlB,EACT,QAAU,GAEd,OAAU,CACN,MAASA,EACT,QAAU,IAGlB,OAAU,CACN,IAAO,EACP,OAAU,IAGlBC,KAAKK,YAAYI,KAAKQ,M,2BAI9B,SAAcD,GACV,OAAOhB,KAAKK,YAAYW,K,2BAI5B,SAAcA,GACV,OAAOhB,KAAKK,YAAYW,GAAjB,Q,2BAEX,SAAcA,EAAGE,EAAWC,GACxBnB,KAAKK,YAAYW,GAAjB,MAA6BE,GAAaC,I,0BAI9C,SAAaH,GACT,OAAOhB,KAAKK,YAAYW,GAAjB,O,0BAEX,SAAaA,EAAGE,EAAWE,EAAWC,GAClCrB,KAAKK,YAAYW,GAAjB,KAA4BE,GAA5B,MAAkDE,EAClDpB,KAAKK,YAAYW,GAAjB,KAA4BE,GAA5B,OAAmDG,I,0BAIvD,SAAaL,GACT,OAAOhB,KAAKK,YAAYW,GAAjB,O,0BAEX,SAAaA,EAAGE,EAAWI,GACvBtB,KAAKK,YAAYW,GAAjB,KAA4BE,GAAaI,I,4BAI7C,SAAeN,GACX,OAAOhB,KAAKK,YAAYW,GAAjB,S,4BAEX,SAAeA,EAAGE,EAAWL,GACzBb,KAAKK,YAAYW,GAAjB,OAA8BE,GAAaL,I,0BAG/C,SAAaU,GACT,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,K,oBAGtC,WACI,OAAOvB,KAAKI,M,oBAEhB,SAAOA,GACHJ,KAAKI,IAAMA,EAEX,IAAK,IAAIY,EAAI,EAAGA,EAAIhB,KAAKE,gBAAgByB,OAAQX,IAC7ChB,KAAKE,gBAAgBc,O,4BAG7B,WACI,OAAOhB,KAAKG,c,mCAIhB,WAEIH,KAAKG,aAAe,EACpB,IAAIyB,EAAW5B,KAAK6B,eACpB7B,KAAK8B,KAAO,GACZ9B,KAAK8B,KAAL,IAAmB9B,KAAKI,IACxBJ,KAAK8B,KAAL,OAAsBF,EACtB5B,KAAK8B,KAAL,KAAoBC,OAQpB,IANA,IAAIC,EAAU,CACV,MAAUhC,KAAKG,YACf,OAAU8B,KAAKC,UAAUlC,KAAK8B,OAIzBd,EAAI,EAAGA,EAAIhB,KAAKE,gBAAgByB,OAAQX,IAC7ChB,KAAKE,gBAAgBc,KAGzB,OAAOgB,I,oCAGX,SAAuBA,GACnBlB,QAAQC,IAAI,+BAGZf,KAAKG,YAAc6B,EAAO,MAG1B,IAAIG,EAASH,EAAO,OACpBhC,KAAKI,IAAM+B,EAAM,IAGjB,IAAK,IAAInB,EAAI,EAAGA,EAAIhB,KAAKE,gBAAgByB,OAAQX,IAC7ChB,KAAKE,gBAAgBc,KAKzB,IAAIoB,EAAYD,EAAM,OACtBnC,KAAKqC,kBAAkBD,GAGvB,IAAK,IAAIpB,EAAI,EAAGA,EAAIhB,KAAKC,iBAAiB0B,OAAQX,IAC9ChB,KAAKC,iBAAiBe,O,0BAK9B,WACI,IAAIY,EAAW,GAKf,OAJA5B,KAAKK,YAAYiC,SAAQ,SAAAC,GACrB,IAAIC,EAAID,EAAC,MACTX,EAASnB,KAAK+B,MAEXZ,I,+BAGX,SAAkBQ,GAEdpC,KAAKK,YAAc,GAGnB,IAAK,IAAIW,EAAI,EAAGA,EAAIoB,EAAUT,OAAQX,IAAK,CACvC,IAAIyB,EAAOL,EAAUpB,GACjB0B,EAAW,CACX,MAAS,CACL,IAAOD,EAAK5C,GACZ,OAAU4C,EAAK5C,IAGnB,KAAQ,CACJ,IAAO4C,EAAK5C,KAAoBC,EAChC,OAAU2C,EAAK5C,KAAuBC,GAE1C,KAAQ,CACJ,IAAO,CACH,MAASC,EACT,QAAU,GAEd,OAAU,CACN,MAASA,EACT,QAAU,IAIlB,OAAU,CACN,IAAO0C,EAAK5C,KAAoBC,EAAiBE,KAAKM,eAAiB,EACvE,OAAUmC,EAAK5C,KAAuBC,EAAiBE,KAAKM,eAAiB,IAGrFN,KAAKK,YAAYI,KAAKiC,Q,MCnLnB,M,WAjDb,aAAe,oBACX1C,KAAK2C,QAAUC,uCAEf5C,KAAK6C,OAASC,YAAG9C,KAAK2C,QAAS,CAC3BI,cAAc,EACdC,kBAAmB,IACnBC,qBAAsBC,MAG1BlD,KAAK6C,OAAOM,KAAK,UAAWnD,KAAKoD,UAAUC,KAAKrD,O,6CAGpD,WACIc,QAAQC,IAAI,aAEZf,KAAK6C,OAAOS,GAAG,OAAQtD,KAAKuD,QAAQF,KAAKrD,OACzCA,KAAK6C,OAAOS,GAAG,eAAe,SAACtB,GAC7BwB,EAAiBC,uBAAuBzB,MAI1ChC,KAAK6C,OAAOa,KAAK,a,uBAIrB,WAME1D,KAAK6C,OAAOa,KAAK,WALH,CACZ,MAAS,EACT,KAAQ,4B,wBAOZ,WACI5C,QAAQC,IAAI,iC,qBAGhB,SAAQ0B,M,mCAIR,WACE,IAAIT,EAAUwB,EAAiBG,wBAC/B3D,KAAK6C,OAAOa,KAAK,WAAY1B,O,MF3D7B4B,EAAY,CAAC,SAAU,SAE3B,SAASC,IAA2Q,OAA9PA,EAAWC,OAAOC,QAAU,SAAUC,GAAU,IAAK,IAAIhD,EAAI,EAAGA,EAAIiD,UAAUtC,OAAQX,IAAK,CAAE,IAAIkD,EAASD,UAAUjD,GAAI,IAAK,IAAImD,KAAOD,EAAcJ,OAAOM,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQH,EAAOG,GAAOD,EAAOC,IAAY,OAAOH,IAA2BO,MAAMvE,KAAMiE,WAEhT,SAASO,EAAyBN,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkEC,EAAKnD,EAAnEgD,EAEzF,SAAuCE,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2DC,EAAKnD,EAA5DgD,EAAS,GAAQU,EAAaZ,OAAOa,KAAKT,GAAqB,IAAKlD,EAAI,EAAGA,EAAI0D,EAAW/C,OAAQX,IAAOmD,EAAMO,EAAW1D,GAAQyD,EAASG,QAAQT,IAAQ,IAAaH,EAAOG,GAAOD,EAAOC,IAAQ,OAAOH,EAFxMa,CAA8BX,EAAQO,GAAuB,GAAIX,OAAOgB,sBAAuB,CAAE,IAAIC,EAAmBjB,OAAOgB,sBAAsBZ,GAAS,IAAKlD,EAAI,EAAGA,EAAI+D,EAAiBpD,OAAQX,IAAOmD,EAAMY,EAAiB/D,GAAQyD,EAASG,QAAQT,IAAQ,GAAkBL,OAAOM,UAAUY,qBAAqBV,KAAKJ,EAAQC,KAAgBH,EAAOG,GAAOD,EAAOC,IAAU,OAAOH,EAMne,IAAI,EAAW,SAAkBiB,GAC/B,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACbC,EAAQZ,EAAyBS,EAAMrB,GAE3C,OAAoB,IAAMyB,cAAc,MAAOxB,EAAS,CACtDyB,MAAO,OACPzE,OAAQ,OACR0E,QAAS,YACTC,IAAKN,GACJE,GAAQD,EAAqB,IAAME,cAAc,QAAS,KAAMF,GAAS,KAAMvF,IAAOA,EAAkB,IAAMyF,cAAc,IAAK,CAClII,GAAI,aACJC,UAAW,sBACG,IAAML,cAAc,IAAK,CACvCI,GAAI,QACJC,UAAW,6BACG,IAAML,cAAc,OAAQ,CAC1C7C,EAAG,gDACHiD,GAAI,YACJE,KAAM,UACNC,SAAU,UACVC,OAAQ,UACRC,YAAa,KACG,IAAMT,cAAc,OAAQ,CAC5C7C,EAAG,oFACHiD,GAAI,oBACJE,KAAM,UACNC,SAAU,UACVC,OAAQ,SACO,IAAMR,cAAc,OAAQ,CAC3C7C,EAAG,kEACHiD,GAAI,cACJE,KAAM,UACNC,SAAU,UACVC,OAAQ,SACO,IAAMR,cAAc,OAAQ,CAC3C7C,EAAG,oFACHiD,GAAI,eACJE,KAAM,UACNC,SAAU,UACVC,OAAQ,aAIRE,EAA0B,IAAMC,YAAW,SAAUZ,EAAOI,GAC9D,OAAoB,IAAMH,cAAc,EAAUxB,EAAS,CACzDqB,OAAQM,GACPJ,OG3DCa,GH6DS,IG7DD,CACVC,QAAS,QACTC,QAAS,UAGPC,EAAW,CACbC,WAAY,MACZC,WAAY,OACZC,UAAW,OACXC,MAAO,OACPC,IAAK,OACLC,QAAS,OACTC,SAAU,OACVC,KAAM,OACNC,SAAU,OACVC,UAAW,OACXC,QAAS,OACTC,YAAa,OACbC,aAAc,OACdC,SAAU,OACVC,aAAc,OACdC,cAAe,OACfC,OAAQ,OACRC,YAAa,OACbC,YAAa,OACbC,KAAM,OACNC,SAAU,OACVC,UAAW,QAGTC,EAIU,MAJVA,EAKS,MALTA,EAMK,OAyBLC,EACQ,kBADRA,EAEO,uBCpDPC,EAAY,CAChBC,OAAQC,IAAOC,UAAU,CACvB,KAAM,CACJtC,UAAW,gBAEb,MAAO,CACLA,UAAW,kBAEb,OAAQ,CACNA,UAAW,qBAKXuC,EAAS,CACXC,UAAW,CACPC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,WAAY,SACZzH,OAAQ,OACR0H,YAAaZ,EACba,aAAcb,GAGlBxC,MAAO,CACHsD,gBAAiBxC,EAAMC,QACvBD,MAAOA,EAAMyC,QACbf,QAASA,EACTC,WAAYA,EACZxB,SAAUA,EAASM,QACnBiC,cAAe,OAGnBC,cAAe,CACbC,UAAWlB,GAGbmB,eAAgB,CACdjB,UAAW,6BACXkB,cAAelB,EAAUC,QAG3BkB,KAAM,CACF1D,MAAO,OACPzE,OAAQ,SAIVoI,E,kDACJ,WAAY7D,GAAQ,IAAD,8BACjB,cAAMA,IACD9D,MAAM,GAFM,E,0CAOnB,WACE,IAAI4H,EAAa,CAACjB,EAAOW,cAAeX,EAAOa,gBAC/C,OACE,yBAAKK,MAAOlB,EAAOmB,OACjB,yBAAKD,MAAOlB,EAAOC,WACjB,yBAAKiB,MAAOlB,EAAO9C,OAAnB,kBACA,yBAAKgE,MAAOD,EACVG,QAASrJ,KAAKsJ,YAAYjG,KAAKrD,OAE/B,kBAAC,EAAD,CAAOmJ,MAAOlB,EAAOe,Y,yBAO/B,WACElI,QAAQC,IAAI,uB,GAzBKwI,IAAMC,WA6BZzB,cAAOkB,G,iBC/EDQ,E,WACjB,WAAY9I,EAAGK,EAAG0I,EAAMC,EAAMC,GAAa,oBAEvC5J,KAAK6J,GAAKlJ,EAGVX,KAAK4J,WAAaA,EAGlB5J,KAAK8J,IAAM9J,KAAK6J,GAAGE,aAAaL,EAAMC,GAGtC,IAAIK,EAAOhK,KAAKiK,YAAcjK,KAAK4J,WAAW,EAC9C5J,KAAKkK,OAASlK,KAAK6J,GAAGE,aAAaC,EAAML,EAAO3J,KAAK6J,GAAGhJ,OAAO,GAE/Db,KAAKmK,UAAYnK,KAAK6J,GAAGE,aAAaC,EAAML,EAAO3J,KAAK6J,GAAGhJ,OAAO,GAGlEb,KAAKoK,WAAapK,KAAK6J,GAAG5D,MAAM,SAChCjG,KAAKqK,gBAAkBrK,KAAK6J,GAAG5D,MAAM,SAGrCjG,KAAKsK,OAAStJ,EACdhB,KAAKuK,eAGLvK,KAAKwK,eAAiB,GACtBC,YAAYzK,KAAK0K,mBAAmBrH,KAAKrD,MAAO,K,wCAGpD,SAAK2K,EAAmBC,GACpB,IAAIZ,EAAOhK,KAAKiK,YAKhB,GAJAjK,KAAK6J,GAAGlE,KAAK3F,KAAKoK,YAClBpK,KAAK6J,GAAGgB,WAGJF,GAAqBC,EAAoB,CACzC5K,KAAK8K,gBAAgBjL,GACrBG,KAAK8K,gBAAgBjL,GAErB,IAAIgB,EAASb,KAAK+K,UAAUlL,GAC5BG,KAAK6J,GAAGmB,KAAKhB,EAAMhK,KAAK8J,IAAL,EAAe9J,KAAK4J,YAAa/I,GAEpDA,EAASb,KAAK+K,UAAUlL,GACxBG,KAAK6J,GAAGmB,KAAKhB,EAAMhK,KAAK8J,IAAL,EAAe9J,KAAK4J,WAAY/I,QAG/Cb,KAAKiL,QAAQpL,IAEbG,KAAK6J,GAAGmB,KAAKhB,EAAMhK,KAAK8J,IAAL,EAAe9J,KAAK4J,YAAa5J,KAAK6J,GAAGhJ,OAAO,GAInEb,KAAKiL,QAAQpL,IAEbG,KAAK6J,GAAGmB,KAAKhB,EAAMhK,KAAK8J,IAAL,EAAe9J,KAAK4J,WAAY5J,KAAK6J,GAAGhJ,OAAO,K,gCAO9E,WAAsB,IAAD,OACbqK,EAAgB,SAAChK,GAEjB,GADmB,EAAKiK,aAAajK,GACrB,YAGT,CAEH,IAAIkK,EAAI,EAAKvB,GAAGwB,IAAI,EAAKxB,GAAGnI,OAAO,EAAG,IACtC0J,EAAU,IAANA,EAAUrL,EAAkBA,EAChCyD,EAAiB8H,aAAa,EAAKhB,OAAQpJ,EAAWkK,GAAG,KAKjEF,EAAcrL,GACdqL,EAAcrL,K,6BAIlB,SAAgBqB,GACZ,IAAIqK,EAAkBvL,KAAKmL,aAAajK,GAAlB,OAClBsK,EAAexL,KAAKmL,aAAajK,GAAlB,MACfuK,EAAYzL,KAAK+K,UAAU7J,GAG/B,GAAIqK,EACA,OAAQC,GACJ,KAAKzL,EAED,MAGJ,KAAKA,EACG0L,EAAYzL,KAAK6J,GAAGhJ,OAAO,GAC3B4K,GAnGJ,IAoGIjI,EAAiBkI,eAAe1L,KAAKsK,OAAQpJ,EAAWuK,GACxDzL,KAAK2L,OAAOzK,EAAWuK,IAGvBjI,EAAiB8H,aAAatL,KAAKsK,OAAQpJ,EAAWnB,GAAiB,GAE3E,MAGJ,KAAKA,EACG0L,EAAY,GACZA,GA/GJ,IAgHIjI,EAAiBkI,eAAe1L,KAAKsK,OAAQpJ,EAAWuK,GACxDzL,KAAK2L,OAAOzK,EAAWuK,IAGvBjI,EAAiB8H,aAAatL,KAAKsK,OAAQpJ,EAAWnB,GAAiB,M,oBAW3F,SAAOmB,EAAWL,GACVK,IAAcrB,EACdG,KAAKkK,OAAL,EAAmBlK,KAAK6J,GAAG+B,IAAI/K,EAAQ,EAAGb,KAAK6J,GAAGhJ,OAAO,EAAGb,KAAK6J,GAAGhJ,OAAO,EAAG,GAE9Eb,KAAKmK,UAAL,EAAsBnK,KAAK6J,GAAG+B,IAAI/K,EAAQ,EAAGb,KAAK6J,GAAGhJ,OAAO,EAAGb,KAAK6J,GAAGhJ,OAAO,EAAGb,KAAK6J,GAAGhJ,U,4BAIjG,WACI,IAAImJ,EAAOhK,KAAKiK,YAChBjK,KAAK6J,GAAGlE,KAAK3F,KAAKqK,iBAClBrK,KAAK6J,GAAGgC,OAAO7B,EAAMhK,KAAK8J,IAAL,EAAe,M,uBAGxC,WACI,OAAO9J,KAAK8J,IAAL,EAAgB9J,KAAK4J,WAAW,I,0BAG3C,SAAa1I,GACT,OAAOsC,EAAiB2H,aAAanL,KAAKsK,QAAQpJ,K,uBAGtD,SAAUA,GAEN,OADkBsC,EAAiBsI,eAAe9L,KAAKsK,QACpCpJ,K,qBAIvB,SAAQA,GAEJ,OADgBsC,EAAiBuI,aAAa/L,KAAKsK,QAClCpJ,K,kBAIrB,SAAKA,GAED,OADiBsC,EAAiBwI,cAAchM,KAAKsK,QACnCpJ,KAAepB,I,uBAGrC,SAAUoB,GAEN,OADQsC,EAAiB2H,aAAanL,KAAKsK,QAAQpJ,GAA3C,S,6BAIZ,SAAgBA,GACZ,IAAI+K,EAAgBzI,EAAiBwI,cAAchM,KAAKsK,QAAQpJ,GAC5DsK,EAAehI,EAAiB2H,aAAanL,KAAKsK,QAAQpJ,GAG1D+K,IAAkBnM,IAEd0L,EAAY,QAIRA,EAAY,QAAczL,IAC1ByD,EAAiB8H,aAAatL,KAAKsK,OAAQpJ,EAAWnB,GAAmB,GAEzEyD,EAAiB0I,cAAclM,KAAKsK,OAAQpJ,EAAWpB,KAQ/DmM,IAAkBnM,IACd0L,EAAY,QAGRA,EAAY,QAAczL,IAC1ByD,EAAiB8H,aAAatL,KAAKsK,OAAQpJ,EAAWnB,GAAiB,GAEvEyD,EAAiB0I,cAAclM,KAAKsK,OAAQpJ,EAAWpB,O,6BAQvE,SAAgBoB,EAAWI,GACvBkC,EAAiB2I,aAAanM,KAAKsK,OAAQpJ,EAAWI,K,0BAK1D,WACI,IAAIH,EAAaqC,EAAiBwI,cAAchM,KAAKsK,QACjD8B,EAAWpM,KAAK6J,GAAGhJ,OAAO,EAI1BK,EAAYrB,EACZsB,EAAWD,KAAepB,GAC1B0D,EAAiBkI,eAAe1L,KAAKsK,OAAQpJ,EAAWkL,GAGxDjL,EAAWD,KAAepB,GAC1B0D,EAAiBkI,eAAe1L,KAAKsK,OAAQpJ,EATjC,GAcZC,EADJD,EAAYrB,KACkBC,GAC1B0D,EAAiBkI,eAAe1L,KAAKsK,OAAQpJ,EAAWkL,GAGxDjL,EAAWD,KAAepB,GAC1B0D,EAAiBkI,eAAe1L,KAAKsK,OAAQpJ,EAnBjC,O,KCrNHmL,E,WACjB,WAAY1L,GAAI,oBACZX,KAAK6J,GAAKlJ,EACVX,KAAKsM,OAAS,GACdtM,KAAKuM,QAAUxK,KAAKyK,MACpBxM,KAAKyM,UAAY,EACjBzM,KAAK0M,WAAY,EACjB1M,KAAK2M,cAAe,EACpB3M,KAAK4K,oBAAqB,EAC1B5K,KAAK4M,OAAS,E,yCAGlB,WAEI5M,KAAK6M,gBACLrJ,EAAiBsJ,aAAa9M,KAAK6J,GAAGhJ,OAAO,GAC7C2C,EAAiBuJ,cAAc/M,KAAKgN,aAAa3J,KAAKrD,OACtDwD,EAAiByJ,gBAAgBjN,KAAKkN,aAAa7J,KAAKrD,S,0BAI5D,WACI,IAAImN,EAAS3J,EAAiB4J,SAC9BpN,KAAK4M,OAAU,IAAWO,I,0BAG9B,WACInN,KAAKqN,gB,2BAGT,WAMI,IAJA,IAAIC,EAAkBtN,KAAK6J,GAAGvE,MAlCnB,GAqCPsE,EAAa0D,EAAiB,EACzBtM,EAAI,EAAGA,EAtCL,GAsCqBA,IAAK,CACjC,IAAI0I,EAAO1I,EAAIsM,EAEXC,EAAI,IAAI9D,EAAMzJ,KAAK6J,GAAI7I,EAAG0I,EAAM1J,KAAK6J,GAAGhJ,OAAO,EAAG+I,GACtD5J,KAAKsM,OAAO7L,KAAK8M,M,kBAIzB,SAAK5C,EAAmB6C,EAAgBC,GAEhC9C,EAEA3K,KAAK0N,sBAAsBF,EAAgBC,IAG3CzN,KAAK4K,oBAAqB,EAE1B5K,KAAK2N,4BAIT,IAAK,IAAI3M,EAAI,EAAGA,EAAIhB,KAAKsM,OAAO3K,OAAQX,IACpChB,KAAKsM,OAAOtL,GAAG4M,KAAKjD,EAAmB3K,KAAK4K,sB,mCAIpD,SAAsB4C,EAAgBC,GAElCzN,KAAKqC,kBAAkBmL,EAAgBC,GAEvCzN,KAAK2M,cAAe,I,+BAGxB,SAAkBa,EAAgBC,GAC9B,IAAK,IAAIzM,EAAI,EAAGA,EAAIhB,KAAKsM,OAAO3K,OAAQX,IAAK,CACzC,IAAI6M,EAAQ7N,KAAKsM,OAAOtL,GAGpBwB,EAAIgL,EAAeM,KAAKD,EAAM/D,KAG9B0D,EAAc,EAAQxN,KAAK6J,GAAGhJ,OAAO,EAGjC2B,EAAIiL,EAAc,GAElBI,EAAME,gBAAgBlO,GAItB2C,EAAIiL,EAAc,GAElBI,EAAME,gBAAgBlO,M,sCAMtC,WAGI,IAAK,IAAImB,EAAI,EAAGA,EAAIhB,KAAKsM,OAAO3K,OAAQX,IAAK,CACzC,IAAI6M,EAAQ7N,KAAKsM,OAAOtL,GACpBgN,EAAMH,EAAMI,UAAUpO,GACtBqO,EAASL,EAAMI,UAAUpO,GAC7BG,KAAK4K,mBAAqB5K,KAAK4K,oBAAsBoD,GAAOE,EAQhE,KAJKlO,KAAK4K,oBAAsB5K,KAAK2M,cACjC3M,KAAKqN,eAGJrN,KAAK4K,qBACa7I,KAAKyK,MAAQxM,KAAKuM,QACnBvM,KAAK4M,OAAQ,CAE3B,IAAIiB,EAAQ7N,KAAKsM,OAAOtM,KAAKyM,WAGzBzM,KAAK0M,WACDmB,EAAMM,KAAKtO,KACXgO,EAAMO,gBAAgBvO,GAAgB,GACtCG,KAAKuM,QAAUxK,KAAKyK,OAExBxM,KAAKyM,WAAa,IAGdoB,EAAMM,KAAKtO,KACXgO,EAAMO,gBAAgBvO,GAAmB,GACzCG,KAAKuM,QAAUxK,KAAKyK,OAExBxM,KAAKyM,WAAa,GAlInB,KAsICzM,KAAKyM,YACLzM,KAAKyM,UAAY4B,GACjBrO,KAAK0M,WAAY,GAGjB1M,KAAKyM,UAAY,GAEjBzM,KAAKqN,iB,8BAMrB,WACIvM,QAAQC,IAAI,yBAEZ,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,KAAKsM,OAAO3K,OAAQX,IAAK,CACzC,IAAI6M,EAAQ7N,KAAKsM,OAAOtL,GACxB6M,EAAMO,gBAAgBvO,GAAgB,GACtCgO,EAAMO,gBAAgBvO,GAAmB,GAG7CG,KAAK2M,cAAe,I,yBAGxB,WACI3M,KAAKsO,mBACLtO,KAAKyM,UAAY,EACjBzM,KAAK0M,WAAY,M,KChKJ6B,E,WACjB,WAAY5N,GAAI,oBACZX,KAAK6J,GAAKlJ,EACVX,KAAKwO,WAAaxO,KAAK6J,GAAGE,aAAa,EAAG,GAC1C/J,KAAKyN,cAAgBzN,KAAK6J,GAAGhJ,OAAO,E,wCAGxC,SAAK8J,EAAmB2B,GACpB,GAAI3B,EAAmB,CACnB3K,KAAKwO,WAAL,GAVG,MAUsBxO,KAAK6J,GAAG4E,OAASzO,KAAKwO,WAAL,GAC1CxO,KAAKwO,WAAL,GAXG,MAWsBxO,KAAK6J,GAAG6E,OAAS1O,KAAKwO,WAAL,GAG1CxO,KAAK2O,iBAGL,IAAK,IAAI3N,EAAI,EAAGA,EAAIsL,EAAO3K,OAAQX,IAAK,CACpC,IAAI6M,EAAQvB,EAAOtL,GAGnB,GAAIhB,KAAKwO,WAAL,EAAuBxO,KAAK6J,GAAGhJ,OAAO,EAAG,CACzC,IAAIiJ,EAAM+D,EAAM3D,OACZrJ,EAASgN,EAAM9C,UAAUlL,GACzBgB,EAASb,KAAK6J,GAAGhJ,OAAO,GAAKA,EAAS,GACtCb,KAAK4O,SAAS9E,EAAK9J,KAAKwO,WAAYxN,OAErC,CACH,IAAI8I,EAAM+D,EAAM1D,UACZtJ,EAASgN,EAAM9C,UAAUlL,GACzBgB,EAASb,KAAK6J,GAAGhJ,OAAO,GAAKA,EAAS,GACtCb,KAAK4O,SAAS9E,EAAK9J,KAAKwO,WAAYxN,IAMhDhB,KAAK6O,iB,4BAKb,WACQ7O,KAAKwO,WAAL,EAAuBxO,KAAK6J,GAAGvE,QAC/BtF,KAAKwO,WAAL,EAAuBxO,KAAK6J,GAAGvE,OAG/BtF,KAAKwO,WAAL,EAAuB,IACvBxO,KAAKwO,WAAL,EAAuB,GAGvBxO,KAAKwO,WAAL,EAAuBxO,KAAK6J,GAAGhJ,SAC/Bb,KAAKwO,WAAL,EAAuBxO,KAAK6J,GAAGhJ,QAG/Bb,KAAKwO,WAAL,EAAuB,IACvBxO,KAAKwO,WAAL,EAAuB,K,yBAI/B,WAOIxO,KAAK6J,GAAGlE,KAAK3F,KAAK6J,GAAG5D,MAAM,IAAK,IAAK,IAAK,MAC1CjG,KAAK6J,GAAGiF,aAAa,GACrB9O,KAAK6J,GAAGhE,OAAO7F,KAAK6J,GAAG5D,MAAM,UAC7BjG,KAAK6J,GAAGkF,QAAQ/O,KAAKwO,WAAL,EAAsBxO,KAAKwO,WAAL,EAAsB,M,sBAGhE,SAASQ,EAAYC,EAAUjO,GAC3B,IAAIkO,EAAUlP,KAAK6J,GAAG+B,IAAI5K,EAAG,EAAG,GAAI,IAAK,KACrCmO,EAASnP,KAAK6J,GAAG+B,IAAI5K,EAAG,EAAG,GAAI,EAAG,GACtChB,KAAK6J,GAAGhE,OAAO7F,KAAK6J,GAAG5D,MAAM,IAAK,IAAK,IAAKiJ,IAC5ClP,KAAK6J,GAAGiF,aAAaK,GACrBnP,KAAK6J,GAAGuF,KAAKJ,EAAU,EAAOA,EAAU,EAAOC,EAAQ,EAAOA,EAAQ,O,KC9EzDI,E,WACjB,WAAY1O,GAAI,oBACZX,KAAK6J,GAAKlJ,EACVX,KAAKsP,OAAS9L,EAAiBpD,IAC/BJ,KAAKuP,eAAiB,GACtBvP,KAAKuM,QAAU,G,0CAInB,SAAOiD,EAAehB,EAAYlC,GAC9B,GAAIkD,EAAe,CACf,IAAIC,GAAY,EAGZA,EAFEjB,EAAU,EAAQxO,KAAK6J,GAAGvE,MAAM,GAAOkJ,EAAU,EAAQxO,KAAK6J,GAAGhJ,OAAO,GACrE2N,EAAU,EAAQxO,KAAK6J,GAAGvE,MAAM,GAAOkJ,EAAU,EAAQxO,KAAK6J,GAAGhJ,OAAO,EAQjF,IADA,IAAI6O,EAAM,EACD1O,EAAI,EAAGA,EAAIsL,EAAO3K,OAAQX,IAAK,CACpC,IAAI6M,EAAQvB,EAAOtL,GACf6M,EAAMM,KAAKtO,KACX6P,GAAO,GAEP7B,EAAMM,KAAKtO,KACX6P,GAAO,GAKf,IAAIC,EAAc5N,KAAKyK,MAAQxM,KAAKuM,QAChCqD,EAAI5P,KAAK6J,GAAGgG,IAAIF,EAAcD,GAC9BI,EAAU9P,KAAK6J,GAAG+B,IAAIgE,GAAI,EAAG,EAAG,EAAG,KAGvC5P,KAAKsP,OAASG,EAAazP,KAAKsP,OAASQ,EAAW9P,KAAKsP,OAASQ,EAE9D9P,KAAKsP,OAxCL,MAyCAtP,KAAKsP,OAzCL,KA4CAtP,KAAKsP,OA7CL,MA8CAtP,KAAKsP,OA9CL,KAkDJ9L,EAAiBuM,OAAOvO,KAAKC,MAAMzB,KAAKsP,cAIxCtP,KAAKuM,QAAUxK,KAAKyK,U,KChD5BwD,EAAS,SAACrP,GACZ,IACIsP,EAAcC,EAAab,EAD3B1E,GAAoB,EAExBhK,EAAEwP,MAAQ,WACR,IACItP,EADkBF,EAAEyP,OAAO,oBACFvP,OAC7BF,EAAE0P,aAAaC,OAAOC,WAAY1P,GAElCoP,EAAe,IAAI5D,EAAa1L,GAChCuP,EAAc,IAAI3B,EAAY5N,GAC9B0O,EAAa,IAAImB,EAAW7P,GAC5BsP,EAAaE,SAGfxP,EAAEiN,KAAO,WACPjN,EAAE8P,WAAW9P,EAAEsF,MAAM,EAAG,EAAG,IAC3BgK,EAAarC,KAAKjD,EAAmBuF,EAAY1B,WAAY0B,EAAYzC,eACzE9M,EAAE+P,iBACFR,EAAYtC,KAAKjD,EAAmBsF,EAAa3D,QACjD+C,EAAWsB,OAAOhG,EAAmBuF,EAAY1B,WAAYyB,EAAa3D,SAG5E3L,EAAE+P,eAAiB,WAEjB/P,EAAEkF,OAAO,SACTlF,EAAEmO,aAAa,GACfnO,EAAEyO,KAAK,EAAGzO,EAAEE,OAAO,EAAGF,EAAE2E,MAAO3E,EAAEE,OAAO,IAG1CF,EAAEiQ,aAAe,WACXjQ,EAAE+N,OAAS/N,EAAEE,QAAUF,EAAE+N,OAAS,IAGpC/D,GAAoB,IAIxBhK,EAAEkQ,cAAgB,WAChBlG,GAAoB,IASlB1C,EAAS,CAEbC,UAAW,CACTO,gBAAiBxC,EAAMC,QACvBrF,OAAQ,OACRiQ,OAAQ,EACRnJ,QAAS,IAIPoJ,E,kDACJ,WAAY3L,GAAQ,IAAD,8BACjB,cAAMA,IACD4L,aAAezH,IAAM0H,YAC1B,EAAKC,UAAY3H,IAAM0H,YAHN,E,qDAMnB,WACEnQ,QAAQC,IAAI,uBACZf,KAAKmR,KAAO,IAAItH,IAAGmG,EAAQhQ,KAAKkR,UAAUE,W,oBAG5C,WACE,OACE,yBAAK3L,GAAI,kBACPD,IAAKxF,KAAKkR,UACV/H,MAAOlB,EAAOC,gB,GAhBGqB,IAAMC,WAsBhBzB,cAAOgJ,GClFhB9I,EAAS,CACXC,UAAW,CACPmJ,SAAU,WACVxQ,OAAQ,MACRyQ,KAAM,IACNC,MAAO,IACPrD,OAAQ,IACR/F,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAChBC,WAAY,SACZC,YAAaZ,EACba,aAAcb,EAEd1B,MAAOA,EAAMyC,QACbd,WAAYA,EACZxB,SAAUA,EAASoL,QACnB7I,cAAe,OAGnB8I,KAAM,CACFhJ,gBAAiBxC,EAAMC,QACvByB,QAASA,IAIX+J,E,kDACJ,WAAYtM,GAAQ,IAAD,8BACjB,cAAMA,IACD9D,MAAM,CACTlB,IAAK,GACLuR,MAAO,IAETnO,EAAiBuJ,cAAc,EAAK6E,aAAavO,KAAlB,iBANd,E,0CASnB,WACE,IAAIjD,EAAMJ,KAAKsB,MAAMlB,IAAM,MACvByR,EAAS,IAAM7R,KAAKsB,MAAMqQ,MAC9B,OACI,yBAAKxI,MAAOlB,EAAOC,WACf,yBAAKiB,MAAOlB,EAAOwJ,MAAOI,GAC1B,yBAAK1I,MAAOlB,EAAOwJ,MAAOrR,GAC1B,yBAAKiJ,QAASrJ,KAAK8R,OAAOzO,KAAKrD,MAAOmJ,MAAOlB,EAAOwJ,MAApD,W,0BAKV,WACE,IAAIM,EAAMvO,EAAiBwO,iBACvB5R,EAAMoD,EAAiB4J,SAC3BpN,KAAKiS,SAAS,CACZN,MAAOI,EAAM,EACb3R,IAAKA,M,oBAIT,SAAO8R,GACLA,EAAMC,kBACNC,EAAUC,4B,GAjCU9I,IAAMC,WAqCfzB,cAAO2J,GC5DhBzJ,EAAS,CACbC,UAAW,CACTmJ,SAAU,QACVrD,IAAK,EACLsD,KAAM,EACNC,MAAO,EACPrD,OAAQ,EACR/F,QAAS,OACTC,cAAe,SACfnC,MAAO,QACPpF,OAAQ,SAGVyR,OAAQ,CACNhN,MAAO,QACPzE,OAAQ,OACR4H,gBAAiB,QACjBxC,MAAO,UAILsM,G,kDACJ,WAAYnN,GAAQ,IAAD,6BACjB,cAAMA,GACNkL,OAAOkC,iBAAiB,SAAU,EAAKC,aAAapP,KAAlB,iBAClC,EAAK/B,MAAQ,CACXoR,YAAa,EAAKA,cAClBC,WAAY,EAAKA,cALF,E,0CASnB,WACE,OACE,yBAAKxJ,MAAOlB,EAAOC,WACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,qBAKN,SAAQgK,GACNA,EAAMC,kBACNC,EAAUQ,c,0BAIZ,WACE9R,QAAQC,IAAI,oBACZf,KAAKiS,SAAS,CACZS,YAAa1S,KAAK0S,cAClBC,WAAY3S,KAAK2S,iB,yBAIrB,WACI,IAAIE,EAAKvC,OAAOwC,YAAcxC,OAAOC,WAKrC,OAJIsC,GACF/R,QAAQC,IAAI,kBAGP8R,I,wBAGX,WACE,IAAIA,EAAKvC,OAAOwC,YAAcxC,OAAOC,WAKrC,OAJIsC,GACF/R,QAAQC,IAAI,iBAGP8R,M,GAjDOtJ,IAAMC,WAqDTzB,eAAOwK,I,SC/EtBQ,IAASC,OAAO,kBAAC,KAAD,KAAW,kBAAC,GAAD,OAAqBC,SAASC,eAAe,U","file":"static/js/main.e1514336.chunk.js","sourcesContent":["var _g;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgAbout = function SvgAbout(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"28px\",\n    height: \"28px\",\n    viewBox: \"0 0 28 28\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-Copy\",\n    transform: \"translate(0.5 0.5)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group\",\n    transform: \"translate(0 0.0012207031)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 0L26.8571 0L26.8571 26.5126L0 26.5126L0 0Z\",\n    id: \"Rectangle\",\n    fill: \"#FFFFFF\",\n    fillRule: \"evenodd\",\n    stroke: \"#000000\",\n    strokeWidth: 1\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.68323 11.5706L8.53964 11.5706L8.53964 15.4269L4.68323 15.4269L4.68323 11.5706Z\",\n    id: \"Rectangle-49-Copy\",\n    fill: \"#000000\",\n    fillRule: \"evenodd\",\n    stroke: \"none\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.0839 0L26.8568 0L26.8568 26.5126L13.0839 26.5126L13.0839 0Z\",\n    id: \"Rectangle-2\",\n    fill: \"#000000\",\n    fillRule: \"evenodd\",\n    stroke: \"none\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.1803 11.5703L22.0367 11.5703L22.0367 15.4267L18.1803 15.4267L18.1803 11.5703Z\",\n    id: \"Rectangle-49\",\n    fill: \"#FFFFFF\",\n    fillRule: \"evenodd\",\n    stroke: \"none\"\n  }))));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgAbout, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/about.ea00a3b0.svg\";\nexport { ForwardRef as ReactComponent };","// Name: DatabaseParamStore.js\r\n// Author: Amay Kataria. \r\n// Date: 02/19/2022\r\n// Description: This data store is responsible to hold bpm, all 48 lights and number of entries.\r\n// This data will be stored in the database. Components that need this data will subscribe to this store.  \r\n\r\nexport const LIGHT_TYPE = {\r\n    TOP: 'TOP',\r\n    BOTTOM: 'BOTTOM'\r\n};\r\n\r\nexport const LIGHT_STATE = {\r\n    ON: 1,\r\n    OFF: 0\r\n};\r\n\r\nexport const GROW_STATE = {\r\n    NONE: 0,\r\n    GROW: 1,\r\n    SHRINK: 2\r\n}\r\n\r\nconst NUM_LIGHTS = 24;\r\n\r\nclass LightConfigStore {\r\n    constructor() {\r\n        // Listeners for this database. \r\n        this.lightSubscribers = []; \r\n        this.infoSubscribers = [];\r\n\r\n        // Default values. \r\n        this.configIndex = 0; \r\n        this.bpm = 150;\r\n        this.lightConfig = [];\r\n\r\n        // Helper value to create default heights. \r\n        this.maxLightHeight = 0;\r\n\r\n        // Default light config for 24 lights. \r\n        this.prepareDefaultLightConfig();\r\n    }\r\n\r\n    subscribeLights(listener) {\r\n        this.lightSubscribers.push(listener); \r\n        const removeListener = () => {\r\n            this.lightSubscribers = this.lightSubscribers.filter((s) => listener !== s);\r\n        };\r\n\r\n        return removeListener;\r\n    }\r\n\r\n    subscribeInfo(listener) {\r\n        this.infoSubscribers.push(listener);\r\n        const removeListener = () => {\r\n            this.infoListeners = this.infoSubscribers.filter((s) => listener !== s);\r\n        };\r\n\r\n        return removeListener;\r\n    }\r\n\r\n    setMaxHeight(height) {\r\n        this.maxLightHeight = height; \r\n    }\r\n\r\n    // Default config for 24 lights. \r\n    prepareDefaultLightConfig() {\r\n        console.log('Preparing default config.');\r\n        for (let i = 0; i < NUM_LIGHTS; i++) {\r\n            // Create a state object.\r\n            let stateObject = {\r\n                'light': {\r\n                    'TOP': 1, \r\n                    'BOTTOM': 1\r\n                },\r\n                'draw': {\r\n                    'TOP': false,\r\n                    'BOTTOM': false\r\n                },\r\n                'grow': {\r\n                    'TOP': {\r\n                        'state': GROW_STATE.NONE,\r\n                        'active': false\r\n                    },\r\n                    'BOTTOM': {\r\n                        'state': GROW_STATE.NONE,\r\n                        'active': false\r\n                    }\r\n                },\r\n                'height': {\r\n                    'TOP': 0,\r\n                    'BOTTOM': 0\r\n                }\r\n            }\r\n            this.lightConfig.push(stateObject); \r\n        }\r\n    }\r\n\r\n    getFullConfig(i) {\r\n        return this.lightConfig[i]; \r\n    }\r\n\r\n    // GET/SET light's state. \r\n    getLightState(i) {\r\n        return this.lightConfig[i]['light'];\r\n    }\r\n    setLightState(i, lightType, lightState) {\r\n        this.lightConfig[i]['light'][lightType] = lightState; \r\n    }\r\n\r\n    // GET/SET light's grow state. \r\n    getGrowState(i) {\r\n        return this.lightConfig[i]['grow'];\r\n    }\r\n    setGrowState(i, lightType, growState, activeState) {\r\n        this.lightConfig[i]['grow'][lightType]['state'] = growState;\r\n        this.lightConfig[i]['grow'][lightType]['active'] = activeState;\r\n    }\r\n\r\n    // GET/SET light's draw state. \r\n    getDrawState(i) {\r\n        return this.lightConfig[i]['draw'];\r\n    }\r\n    setDrawState(i, lightType, state) {\r\n        this.lightConfig[i]['draw'][lightType] = state;\r\n    }\r\n\r\n    // GET/SET light's heights. \r\n    getHeightState(i) {\r\n        return this.lightConfig[i]['height'];\r\n    }\r\n    setHeightState(i, lightType, height) {\r\n        this.lightConfig[i]['height'][lightType] = height; \r\n    }\r\n\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    getBpm() {\r\n        return this.bpm;\r\n    }\r\n    setBpm(bpm) {\r\n        this.bpm = bpm; \r\n        // Trigger info subscribers. \r\n        for (let i = 0; i < this.infoSubscribers.length; i++) {\r\n            this.infoSubscribers[i]();\r\n        }\r\n    }\r\n    getConfigIndex() {\r\n        return this.configIndex;\r\n    }\r\n\r\n    // Increment the config index because this will be a new entry.\r\n    getPayloadForDatabase() {\r\n        //Bad assumption that this call will be successful. \r\n        this.configIndex += 1; \r\n        let dbConfig = this.filterConfig();\r\n        this.json = {}\r\n        this.json['bpm'] = this.bpm; \r\n        this.json['lights'] = dbConfig;\r\n        this.json['time'] = Date();\r\n\r\n        let payload = {\r\n            'index' : this.configIndex, \r\n            'config': JSON.stringify(this.json)\r\n        }\r\n\r\n        // Trigger info subscribers for new data. \r\n        for (let i = 0; i < this.infoSubscribers.length; i++) {\r\n            this.infoSubscribers[i]();\r\n        }\r\n\r\n        return payload;\r\n    }\r\n\r\n    setPayloadFromDatabase(payload) {\r\n        console.log('Overwriting current config.');\r\n\r\n        // Get current index. \r\n        this.configIndex = payload['index'];\r\n\r\n        // Config items. \r\n        let config = payload['config'];\r\n        this.bpm = config['bpm'];\r\n\r\n        // Trigger info subscribers. \r\n        for (let i = 0; i < this.infoSubscribers.length; i++) {\r\n            this.infoSubscribers[i]();\r\n        }\r\n        \r\n        // Light data is an array. Update the current light\r\n        // config with this incoming data. \r\n        let lightData = config['lights'];\r\n        this.updateLightConfig(lightData);\r\n\r\n        // Trigger light subscribers.\r\n        for (let i = 0; i < this.lightSubscribers.length; i++) {\r\n            this.lightSubscribers[i]();\r\n        }\r\n    }\r\n\r\n    // Extract the config we need for the database. \r\n    filterConfig() {\r\n        let dbConfig = []; \r\n        this.lightConfig.forEach(c => {\r\n            let d = c['light']\r\n            dbConfig.push(d);\r\n        });\r\n        return dbConfig; \r\n    }\r\n\r\n    updateLightConfig(lightData) {\r\n        // Empty the current light config. \r\n        this.lightConfig = []; \r\n        \r\n        // Create a new config. \r\n        for (let i = 0; i < lightData.length; i++) {\r\n            let data = lightData[i];\r\n            let stateObj = {\r\n                'light': {\r\n                    'TOP': data[LIGHT_TYPE.TOP], \r\n                    'BOTTOM': data[LIGHT_TYPE.BOTTOM]\r\n                },\r\n                // Create the draw states from the incoming light state. \r\n                'draw': {\r\n                    'TOP': data[LIGHT_TYPE.TOP] === LIGHT_STATE.ON,\r\n                    'BOTTOM': data[LIGHT_TYPE.BOTTOM] === LIGHT_STATE.ON\r\n                },\r\n                'grow': {\r\n                    'TOP': {\r\n                        'state': GROW_STATE.NONE,\r\n                        'active': false\r\n                    },\r\n                    'BOTTOM': {\r\n                        'state': GROW_STATE.NONE,\r\n                        'active': false\r\n                    }\r\n                },\r\n                // Create the height state from the incoming light state. \r\n                'height': {\r\n                    'TOP': data[LIGHT_TYPE.TOP] === LIGHT_STATE.ON ? this.maxLightHeight : 0,\r\n                    'BOTTOM': data[LIGHT_TYPE.BOTTOM] === LIGHT_STATE.ON ? this.maxLightHeight : 0\r\n                }\r\n            }\r\n            this.lightConfig.push(stateObj);\r\n        }\r\n    }\r\n}\r\n\r\nexport default new LightConfigStore();","/*\r\n  Name: Websocket.js\r\n  Author: Amay Kataria\r\n  Date: 02/15/2022\r\n  Description: Class responsible for communication with the webserver. We use websockets\r\n  technology for this. Here we have the websocket client, which communicates with backend\r\n  server over websockets.\r\n*/\r\n\r\nimport io  from 'socket.io-client'\r\nimport LightConfigStore from '../stores/LightConfigStore';\r\n\r\n// const localhostURL = \"http://localhost:5000\";\r\nconst herokuURL = \"https://supersynth.herokuapp.com\";\r\n\r\nclass Websocket {\r\n  constructor() {\r\n      this.siteURL = herokuURL + '/app'; \r\n\r\n      this.socket = io(this.siteURL, {\r\n          reconnection: true,\r\n          reconnectionDelay: 500,\r\n          reconnectionAttempts: Infinity\r\n      });\r\n\r\n      this.socket.once('connect', this.subscribe.bind(this));\r\n  }\r\n\r\n  subscribe() {\r\n      console.log('Connected');\r\n      // Subscribe to incoming events from the webserver here. \r\n      this.socket.on('time', this.logTime.bind(this));\r\n      this.socket.on('receiveData', (payload) => {\r\n        LightConfigStore.setPayloadFromDatabase(payload); \r\n      });\r\n\r\n      // We are connected - trigger a request to receive data.\r\n      this.socket.emit('getData');\r\n  }\r\n\r\n  // ----------------------- DATABASE CALLS --------------------- //\r\n  saveEntry() {\r\n    let payload = {\r\n      'index': 0,\r\n      'data': 'Hi this is fresh data'\r\n    }\r\n\r\n    this.socket.emit('saveData', payload);\r\n  }\r\n\r\n  // -------------------- DON'T CHANGE THESE -------------------    \r\n  disconnect() {\r\n      console.log('Socket Server Disconnected.');\r\n  }\r\n\r\n  logTime(data) {\r\n    // console.log('Socket Connection Alive: ' + data);\r\n  }\r\n\r\n  commitLightConfigData() {\r\n    let payload = LightConfigStore.getPayloadForDatabase();\r\n    this.socket.emit('saveData', payload);\r\n  }\r\n}\r\n\r\nexport default new Websocket();\r\n\r\n\r\n","const color = {\r\n    bgBlack: 'black',\r\n    fgWhite: 'white'\r\n};\r\n\r\nconst fontSize = {\r\n    extraSmall: '8px',\r\n    kindaSmall: '10px',\r\n    verySmall: '12px',\r\n    small: '16px',\r\n    big: '20px',\r\n    veryBig: '24px',\r\n    extraBig: '28px',\r\n    huge: '32px',\r\n    veryHuge: '36px',\r\n    extraHuge: '40px',\r\n    massive: '44px',\r\n    veryMassive: '48px',\r\n    extraMassive: '52px',\r\n    enormous: '56px',\r\n    veryEnormous: '60px',\r\n    extraEnormous: '64px',\r\n    insane: '68px',\r\n    veryInsaane: '72px',\r\n    extraInsane: '76px',\r\n    gaia: '80px',\r\n    veryGaia: '84px',\r\n    extraGaia: '88px'\r\n};\r\n\r\nconst padding = {\r\n    tiny: '2px',\r\n    // Increments of 4\r\n    extraSmall: '4px',\r\n    kindaSmall: '6px',\r\n    verySmall: '8px',\r\n    small: '12px',\r\n    lessBig: '16px',\r\n    // Incremenets of 8\r\n    big : '20px',\r\n    veryBig : '28px',\r\n    extraBig : '36px',\r\n    // Increments of 12\r\n    huge: '52px',\r\n    veryHuge: '64px',\r\n    extraHuge: '76px',\r\n    // Incremenets of 16\r\n    massive: '92px',\r\n    veryMassive: '108px',\r\n    extraMassive: '124px',\r\n    // Increment of 20\r\n    enourmous: '100px',\r\n    veryEnormous: '120px',\r\n    extraEnormous: '140px',\r\n    // Increment of 40\r\n    insane: '160px',\r\n    veryInsane: '200px',\r\n    extraInsane: '240px'\r\n\r\n};\r\n\r\nconst fontFamily = {\r\n    airwaves: 'airwavesregular',\r\n    josefin: 'josefin_sanssemibold'\r\n};\r\n\r\nexport { color, fontSize, fontFamily, padding };","/*\r\n  Name: BottomBar.js\r\n  Author: Amay Kataria\r\n  Date: 02/19/2022\r\n  Description: React component for the top navigation bar on the webpage.\r\n*/\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport { ReactComponent as About } from '../svg/about.svg'\r\nimport {color, fontFamily, fontSize, padding} from './CommonStyles'\r\n\r\nconst animation = {\r\n  rotate: Radium.keyframes({\r\n    '0%': {\r\n      transform: 'rotate(0deg)'\r\n    },\r\n    '50%': {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    '100%': {\r\n      transform: 'rotate(360deg)',\r\n    }\r\n  }),\r\n}\r\n\r\nconst styles = {\r\n    container: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        height: '10vh',\r\n        paddingLeft: padding.small,\r\n        paddingRight: padding.small,\r\n    },\r\n\r\n    title: {\r\n        backgroundColor: color.bgBlack,\r\n        color: color.fbWhite,\r\n        padding: padding.small,\r\n        fontFamily: fontFamily.airwaves,\r\n        fontSize: fontSize.veryBig,\r\n        letterSpacing: '2px'\r\n    },\r\n    \r\n    iconContainer: {\r\n      marginTop: padding.kindaSmall,\r\n    },\r\n\r\n    simpleRotation: {\r\n      animation: 'x 30s ease-in-out infinite',\r\n      animationName: animation.rotate\r\n    },\r\n  \r\n    icon: {\r\n        width: '100%',\r\n        height: '100%'\r\n    }\r\n};\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props); \r\n    this.state={\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let aboutStyle = [styles.iconContainer, styles.simpleRotation];\r\n    return (\r\n      <div style={styles.block}>\r\n        <div style={styles.container}>\r\n          <div style={styles.title}>supersynthesis</div>\r\n          <div style={aboutStyle} \r\n            onClick={this.handleAbout.bind(this)}\r\n          >\r\n            <About style={styles.icon} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleAbout() {\r\n    console.log('Create a popup.');\r\n  }\r\n}\r\n\r\nexport default Radium(Navbar);\r\n","/*\r\n  Name: Light.js\r\n  Author: Amay Kataria\r\n  Date: 02/19/2022\r\n  Description: A class representing each light that is painted on the canvas. \r\n*/\r\nimport LightConfigStore, { LIGHT_TYPE, LIGHT_STATE, GROW_STATE } from \"../stores/LightConfigStore\";\r\n\r\nconst GROW_FACTOR = 2.5;\r\n\r\nexport default class Light {\r\n    constructor(s, i, xPos, yPos, lightWidth) {\r\n        // Sketch object. \r\n        this.p5 = s; \r\n\r\n        // Light's width. \r\n        this.lightWidth = lightWidth;\r\n\r\n        // Origin point at the center.\r\n        this.pos = this.p5.createVector(xPos, yPos);\r\n        \r\n        // Point at the top. \r\n        let newX = this.getNewPos() + this.lightWidth/2; // Keep this at the center of the light.\r\n        this.topPos = this.p5.createVector(newX, yPos - this.p5.height/2);\r\n        // Point at the bottom.\r\n        this.bottomPos = this.p5.createVector(newX, yPos + this.p5.height/2);        \r\n        \r\n        // Colors. \r\n        this.lightColor = this.p5.color('white');\r\n        this.lightPointColor = this.p5.color('green'); // Only debug.\r\n\r\n        // Store the current light config. \r\n        this.curIdx = i; \r\n        this.updateHeight(); \r\n\r\n        // Variable for the timer's interval id. \r\n        this.growIntervalId = ''; \r\n        setInterval(this.randomizeGrowState.bind(this), 3000); \r\n    }\r\n\r\n    draw(isUserInteracting, isCurrentlyGrowing) {\r\n        let newX = this.getNewPos();\r\n        this.p5.fill(this.lightColor);\r\n        this.p5.noStroke();\r\n\r\n        // If user is interacting? Draw everything\r\n        if (isUserInteracting || isCurrentlyGrowing) {\r\n            this.handleGrowState(LIGHT_TYPE.TOP);\r\n            this.handleGrowState(LIGHT_TYPE.BOTTOM);\r\n\r\n            let height = this.getHeight(LIGHT_TYPE.TOP);\r\n            this.p5.rect(newX, this.pos['y'], this.lightWidth, -height);\r\n\r\n            height = this.getHeight(LIGHT_TYPE.BOTTOM);\r\n            this.p5.rect(newX, this.pos['y'], this.lightWidth, height);  \r\n        } else {\r\n             // Am I supposed to draw this top light? \r\n            if (this.canDraw(LIGHT_TYPE.TOP)) {\r\n                // let height = this.getHeight(LIGHT_TYPE.TOP);\r\n                this.p5.rect(newX, this.pos['y'], this.lightWidth, -this.p5.height/2);\r\n            }\r\n\r\n            // Am I supposed to draw this bottom light?\r\n            if (this.canDraw(LIGHT_TYPE.BOTTOM)) {\r\n                // let height = this.getHeight(LIGHT_TYPE.BOTTOM);\r\n                this.p5.rect(newX, this.pos['y'], this.lightWidth, this.p5.height/2);    \r\n            }\r\n        }\r\n\r\n        // this.drawLightPoint();\r\n    }\r\n    \r\n    randomizeGrowState() {\r\n        let calcGrowState = (lightType) => {\r\n            let curGrowState = this.getGrowState(lightType); \r\n            if (curGrowState['active']) {                \r\n                // I'm currently growing or doing something. \r\n                // Pass\r\n            } else {\r\n                // Update my state. \r\n                let r = this.p5.int(this.p5.random(0, 2)); \r\n                r = r === 1 ? GROW_STATE.GROW : GROW_STATE.SHRINK;\r\n                LightConfigStore.setGrowState(this.curIdx, lightType, r, false);\r\n            }\r\n        }\r\n\r\n        // Set new grow states for top and bottom light for the current light. \r\n        calcGrowState(LIGHT_TYPE.TOP);\r\n        calcGrowState(LIGHT_TYPE.BOTTOM);           \r\n    }\r\n\r\n    // Grow & Shrink the height of the light.\r\n    handleGrowState(lightType) {\r\n        let curGrowthActive = this.getGrowState(lightType)['active'];\r\n        let curGrowState = this.getGrowState(lightType)['state'];\r\n        let curHeight = this.getHeight(lightType);\r\n\r\n        // Is the current light's grow active? \r\n        if (curGrowthActive) {\r\n            switch (curGrowState) {\r\n                case GROW_STATE.NONE: {\r\n                    // Pass don't do antyhing. \r\n                    break;\r\n                }\r\n    \r\n                case GROW_STATE.GROW: {\r\n                    if (curHeight < this.p5.height/2) {\r\n                        curHeight += GROW_FACTOR;\r\n                        LightConfigStore.setHeightState(this.curIdx, lightType, curHeight);\r\n                        this.mapPos(lightType, curHeight);\r\n                    } else {\r\n                        // Deactivate the current light. \r\n                        LightConfigStore.setGrowState(this.curIdx, lightType, GROW_STATE.NONE, false);\r\n                    }\r\n                    break;\r\n                }\r\n    \r\n                case GROW_STATE.SHRINK: {\r\n                    if (curHeight > 0) {\r\n                        curHeight -= GROW_FACTOR; \r\n                        LightConfigStore.setHeightState(this.curIdx, lightType, curHeight);\r\n                        this.mapPos(lightType, curHeight);\r\n                    } else {\r\n                        // Deactivate the current light. \r\n                        LightConfigStore.setGrowState(this.curIdx, lightType, GROW_STATE.NONE, false);\r\n                    }\r\n                    break;\r\n                }\r\n    \r\n                default: \r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    mapPos(lightType, height) {\r\n        if (lightType === LIGHT_TYPE.TOP) {\r\n            this.topPos['y'] = this.p5.map(height, 0, this.p5.height/2, this.p5.height/2, 0);\r\n        } else {\r\n            this.bottomPos['y'] = this.p5.map(height, 0, this.p5.height/2, this.p5.height/2, this.p5.height);\r\n        }\r\n    }\r\n\r\n    drawLightPoint() {\r\n        let newX = this.getNewPos();\r\n        this.p5.fill(this.lightPointColor)\r\n        this.p5.circle(newX, this.pos['y'], 10);\r\n    }\r\n    \r\n    getNewPos() {\r\n        return this.pos['x'] + this.lightWidth/2; \r\n    }\r\n\r\n    getGrowState(lightType) {\r\n        return LightConfigStore.getGrowState(this.curIdx)[lightType];\r\n    }\r\n\r\n    getHeight(lightType) {\r\n        let heightState = LightConfigStore.getHeightState(this.curIdx);\r\n        return heightState[lightType];\r\n    }\r\n\r\n    // Should this light be drawn? \r\n    canDraw(lightType) {\r\n        let drawState = LightConfigStore.getDrawState(this.curIdx);\r\n        return drawState[lightType]; // It's true or false. \r\n    }\r\n\r\n    // Is this light on? \r\n    isOn(lightType) {\r\n        let lightState = LightConfigStore.getLightState(this.curIdx);\r\n        return lightState[lightType] === LIGHT_STATE.ON; \r\n    }\r\n\r\n    isGrowing(lightType) {\r\n        let v = LightConfigStore.getGrowState(this.curIdx)[lightType]['active'];\r\n        return v;\r\n    }\r\n\r\n    updateGrowState(lightType) {\r\n        let curLightState = LightConfigStore.getLightState(this.curIdx)[lightType];\r\n        let curGrowState = LightConfigStore.getGrowState(this.curIdx)[lightType]; \r\n\r\n        // Is the light on? \r\n        if (curLightState === LIGHT_STATE.ON) {\r\n            // Is this light currently growing or shrinking? \r\n            if (curGrowState['active']) {\r\n                // I'm doing something - let's not do anything. \r\n            } else {\r\n                // Is the state set to shrink? Because it can only shrink. \r\n                if (curGrowState['state'] === GROW_STATE.SHRINK) {\r\n                    LightConfigStore.setGrowState(this.curIdx, lightType, GROW_STATE.SHRINK, true);\r\n                    // This light will not be turned on anymore.  \r\n                    LightConfigStore.setLightState(this.curIdx, lightType, LIGHT_STATE.OFF);                \r\n                } else {\r\n                    // Pass, we can't grow a light that's already on. \r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        if (curLightState === LIGHT_STATE.OFF) {\r\n            if (curGrowState['active']) {\r\n                // I'm doing something - let's not do anything. \r\n            } else {\r\n                if (curGrowState['state'] === GROW_STATE.GROW) {\r\n                    LightConfigStore.setGrowState(this.curIdx, lightType, GROW_STATE.GROW, true);\r\n                    // This light will not be turned on anymore.  \r\n                    LightConfigStore.setLightState(this.curIdx, lightType, LIGHT_STATE.ON);\r\n                } else {\r\n                    // Pass, we can't shrink a light that's already off. \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateDrawState(lightType, state) {\r\n        LightConfigStore.setDrawState(this.curIdx, lightType, state); \r\n    }\r\n\r\n    // Set light heights based on the light configurations.\r\n    // Call this functions when new configs are received. \r\n    updateHeight() {\r\n        let lightState = LightConfigStore.getLightState(this.curIdx);         \r\n        let onHeight = this.p5.height/2;\r\n        let offHeight = 0;\r\n\r\n        // TOP light. \r\n        let lightType = LIGHT_TYPE.TOP; \r\n        if (lightState[lightType] === LIGHT_STATE.ON) {\r\n            LightConfigStore.setHeightState(this.curIdx, lightType, onHeight);\r\n        }\r\n\r\n        if (lightState[lightType] === LIGHT_STATE.OFF) {\r\n            LightConfigStore.setHeightState(this.curIdx, lightType, offHeight);\r\n        }\r\n\r\n        // BOTTOM light. \r\n        lightType = LIGHT_TYPE.BOTTOM; \r\n        if (lightState[lightType] === LIGHT_STATE.ON) {\r\n            LightConfigStore.setHeightState(this.curIdx, lightType, onHeight);\r\n        }\r\n\r\n        if (lightState[lightType] === LIGHT_STATE.OFF) {\r\n            LightConfigStore.setHeightState(this.curIdx, lightType, offHeight);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n    // Fired when new light updates are received. \r\n    // updateLights() {\r\n    //     console.log('New lights received: Update the light heights.');\r\n    //     for (let i = 0; i < NUM_LIGHTS; i++) {\r\n    //         let l = this.lights[i]; \r\n    //         // let configState = LightConfigStore.getState(i);\r\n    //         // l.setHeight(configState);\r\n    //     }\r\n    // }","/*\r\n  Name: LightManager.js\r\n  Author: Amay Kataria\r\n  Date: 02/19/2022\r\n  Description: A class responsible for handling all the lights. This class is the most critical class\r\n  in this project. \r\n*/\r\nimport Light from './Light'\r\nimport LightConfigStore, { LIGHT_TYPE  } from \"../stores/LightConfigStore\";\r\n\r\nconst NUM_LIGHTS = 24\r\n\r\nexport default class LightManager {\r\n    constructor(s) {\r\n        this.p5 = s; \r\n        this.lights = [];\r\n        this.curTime = Date.now();\r\n        this.gliderIdx = 0;\r\n        this.direction = true; // True - Right, False - Left\r\n        this.allLightsOff = false; \r\n        this.isCurrentlyGrowing = false; \r\n        this.timeOn = 0; \r\n    }\r\n    \r\n    setup() {\r\n        // Prepare the light collection.\r\n        this.prepareLights();\r\n        LightConfigStore.setMaxHeight(this.p5.height/2);\r\n        LightConfigStore.subscribeInfo(this.updateTimeOn.bind(this));\r\n        LightConfigStore.subscribeLights(this.updateLights.bind(this));\r\n    }\r\n\r\n    // New bpm received. \r\n    updateTimeOn() {\r\n        let newBpm = LightConfigStore.getBpm();\r\n        this.timeOn = (60 * 1000)/newBpm;\r\n    }\r\n\r\n    updateLights() {\r\n        this.resetSystem();\r\n    }\r\n\r\n    prepareLights() {\r\n        // Distance between each tube. \r\n        let lightIncrement = (this.p5.width) / NUM_LIGHTS;\r\n\r\n        // Width of each light is half the distance between each light.\r\n        let lightWidth = lightIncrement / 2;\r\n        for (let i = 0; i < NUM_LIGHTS; i++) {\r\n            let xPos = i * lightIncrement; \r\n            // Create a new light instance. \r\n            let l = new Light(this.p5, i, xPos, this.p5.height/2, lightWidth);\r\n            this.lights.push(l);\r\n        }\r\n    }\r\n    \r\n    draw(isUserInteracting, meshEllipsePos, boundaryWidth) {\r\n        // Is user interacting? Draw all the lights. \r\n        if (isUserInteracting) {\r\n            // Control the lights. \r\n            this.handleUserInteracting(meshEllipsePos, boundaryWidth);\r\n        } else {\r\n            // Reset this value here. \r\n            this.isCurrentlyGrowing = false;  \r\n            // Cycle the lights from left to right, then right to left. \r\n            this.handleUserNotInteracting(); \r\n        }\r\n\r\n        // Draw the lights based on the state. \r\n        for (let i = 0; i < this.lights.length; i++) {\r\n            this.lights[i].draw(isUserInteracting, this.isCurrentlyGrowing);\r\n        }\r\n    }\r\n\r\n    handleUserInteracting(meshEllipsePos, boundaryWidth) {       \r\n        // Update the light configuration based on the ellipse. \r\n        this.updateLightConfig(meshEllipsePos, boundaryWidth);\r\n\r\n        this.allLightsOff = false;\r\n    }\r\n\r\n    updateLightConfig(meshEllipsePos, boundaryWidth) {\r\n        for (let i = 0; i < this.lights.length; i++) {\r\n            let light = this.lights[i];\r\n\r\n            // Distance from the ellipse to the light's position. \r\n            let d = meshEllipsePos.dist(light.pos);\r\n\r\n            // Is the ellipse above the half-way line? \r\n            if (meshEllipsePos['y'] < this.p5.height/2) {\r\n                // Handle the top lights. \r\n                // Have we crossed the threshold? \r\n                if (d < boundaryWidth/2) {\r\n                    // This light is activated, grow or shrink. \r\n                    light.updateGrowState(LIGHT_TYPE.TOP);\r\n                }\r\n            } else { // Is the ellipse below the half-way line? \r\n                // Handle the bottom lights. \r\n                if (d < boundaryWidth/2) {\r\n                    // This light is activated, grow or shrink. \r\n                    light.updateGrowState(LIGHT_TYPE.BOTTOM);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleUserNotInteracting() {\r\n        // Are all lights completely grown out? \r\n        // Are the Grow states on all lights set to none?\r\n        for (let i = 0; i < this.lights.length; i++) {\r\n            let light = this.lights[i];\r\n            let top = light.isGrowing(LIGHT_TYPE.TOP);\r\n            let bottom = light.isGrowing(LIGHT_TYPE.BOTTOM);\r\n            this.isCurrentlyGrowing = this.isCurrentlyGrowing || top || bottom; \r\n        }\r\n\r\n        // A clean reset to the system. \r\n        if (!this.isCurrentlyGrowing & !this.allLightsOff) {\r\n            this.resetSystem();\r\n        }\r\n\r\n        if (!this.isCurrentlyGrowing) {\r\n            let elapsedTime  = Date.now() - this.curTime;\r\n            if (elapsedTime > this.timeOn) {\r\n                // Get the current light. \r\n                let light = this.lights[this.gliderIdx];\r\n    \r\n                // Are we going right? \r\n                if (this.direction) {\r\n                    if (light.isOn(LIGHT_TYPE.TOP)) {\r\n                        light.updateDrawState(LIGHT_TYPE.TOP, true);\r\n                        this.curTime = Date.now();\r\n                    }\r\n                    this.gliderIdx += 1;\r\n                } else {\r\n                    // We are definitely going left. \r\n                    if (light.isOn(LIGHT_TYPE.BOTTOM)) {\r\n                        light.updateDrawState(LIGHT_TYPE.BOTTOM, true);\r\n                        this.curTime = Date.now();\r\n                    }\r\n                    this.gliderIdx -= 1;\r\n                }\r\n    \r\n                // We have reached the right most point, start the bottom row. \r\n                if (this.gliderIdx === NUM_LIGHTS) {\r\n                    this.gliderIdx = NUM_LIGHTS - 1;\r\n                    this.direction = false; \r\n                }\r\n    \r\n                if (this.gliderIdx < 0) {\r\n                    // Turn off all the lights and start again. \r\n                    this.resetSystem();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    turnOffAllLights() {\r\n        console.log('Switch off all lights');\r\n        // Top and Bottom lights.\r\n        for (let i = 0; i < this.lights.length; i++) {\r\n            let light = this.lights[i];\r\n            light.updateDrawState(LIGHT_TYPE.TOP, false);\r\n            light.updateDrawState(LIGHT_TYPE.BOTTOM, false);\r\n        }\r\n\r\n        this.allLightsOff = true; \r\n    }\r\n\r\n    resetSystem() {\r\n        this.turnOffAllLights();\r\n        this.gliderIdx = 0; \r\n        this.direction = true;\r\n    }\r\n}","/*\r\n  Name: MeshManager.js\r\n  Author: Amay Kataria\r\n  Date: 02/19/2022\r\n  Description: A class responsible for drawing the connections from the ellipse to all\r\n  the moving lights on the canvas. \r\n*/\r\n\r\nimport { LIGHT_TYPE } from \"../stores/LightConfigStore\";\r\n\r\n// Handles all the code related to interaction with the canvas.\r\nconst EASING = 0.015;  \r\nexport default class MeshManager {\r\n    constructor(s) {\r\n        this.p5 = s; \r\n        this.ellipsePos = this.p5.createVector(0, 0);\r\n        this.boundaryWidth = this.p5.height/2;\r\n    }\r\n\r\n    draw(isUserInteracting, lights) {\r\n        if (isUserInteracting) {    \r\n            this.ellipsePos['x'] += (this.p5.mouseX - this.ellipsePos['x']) * EASING;\r\n            this.ellipsePos['y'] += (this.p5.mouseY - this.ellipsePos['y']) * EASING; \r\n\r\n            // Make sure the ellipse doesn't go outside the boundary.\r\n            this.containEllipse();\r\n\r\n            // Draw pull lines for top and bottom lights.\r\n            for (let i = 0; i < lights.length; i++) {\r\n                let light = lights[i];\r\n\r\n                // Use the local state to draw the lines. \r\n                if (this.ellipsePos['y'] < this.p5.height/2) {\r\n                    let pos = light.topPos;\r\n                    let height = light.getHeight(LIGHT_TYPE.TOP);\r\n                    if (height < this.p5.height/2 && height > 0) {\r\n                        this.drawLine(pos, this.ellipsePos, i);\r\n                    }\r\n                } else {\r\n                    let pos = light.bottomPos;\r\n                    let height = light.getHeight(LIGHT_TYPE.BOTTOM);\r\n                    if (height < this.p5.height/2 && height > 0) {\r\n                        this.drawLine(pos, this.ellipsePos, i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Draw ellipse tracking the mouse. \r\n            this.drawEllipse();\r\n        }        \r\n    }\r\n    \r\n    // Calculate new ellipse position. \r\n    containEllipse() {\r\n        if (this.ellipsePos['x'] > this.p5.width) {\r\n            this.ellipsePos['x'] = this.p5.width;\r\n        } \r\n\r\n        if (this.ellipsePos['x'] < 0) {\r\n            this.ellipsePos['x'] = 0;\r\n        } \r\n\r\n        if (this.ellipsePos['y'] > this.p5.height) {\r\n            this.ellipsePos['y'] = this.p5.height;\r\n        } \r\n\r\n        if (this.ellipsePos['y'] < 0) {\r\n            this.ellipsePos['y'] = 0;\r\n        } \r\n    }\r\n\r\n    drawEllipse() {\r\n        // // Outer ellipse boundary \r\n        // this.p5.fill(this.p5.color(255, 255, 255, 50));\r\n        // this.p5.noStroke();\r\n        // this.p5.ellipse(this.ellipsePos['x'], this.ellipsePos['y'], this.boundaryWidth);  \r\n\r\n        // Inner ellipse\r\n        this.p5.fill(this.p5.color(255, 255, 255, 150));\r\n        this.p5.strokeWeight(3);\r\n        this.p5.stroke(this.p5.color('black'));\r\n        this.p5.ellipse(this.ellipsePos['x'], this.ellipsePos['y'], 60);  \r\n    }\r\n\r\n    drawLine(startPoint, endPoint, i) {\r\n        let opacity = this.p5.map(i, 0, 24, 100, 200);\r\n        let weight = this.p5.map(i, 0, 25, 2, 4);\r\n        this.p5.stroke(this.p5.color(255, 255, 255, opacity));\r\n        this.p5.strokeWeight(weight);\r\n        this.p5.line(startPoint['x'], startPoint['y'], endPoint['x'], endPoint['y']);\r\n    }\r\n}","/*\r\n  Name: bpmManager.js\r\n  Author: Amay Kataria\r\n  Date: 02/20/2022\r\n  Description: A class responsible for handling the logic to calculate the bpm for the current configuration.\r\n*/\r\n\r\nimport LightConfigStore, { LIGHT_TYPE } from \"../stores/LightConfigStore\";\r\n\r\nconst MAX_BPM = 250;\r\nconst MIN_BPM = 100;\r\nexport default class bpmManager {\r\n    constructor(s) {\r\n        this.p5 = s;\r\n        this.curBpm = LightConfigStore.bpm; \r\n        this.bpmSubscribers = []; \r\n        this.curTime = ''; \r\n    }\r\n\r\n    // Simple BPM calculator.\r\n    update(isInteracting, ellipsePos, lights) {\r\n        if (isInteracting) { \r\n            let shouldAdd = false; \r\n            if (((ellipsePos['x'] > this.p5.width/2) && (ellipsePos['y'] < this.p5.height/2))\r\n                || ((ellipsePos['x'] < this.p5.width/2) && (ellipsePos['y'] > this.p5.height/2))){\r\n                shouldAdd = true; \r\n            } else {\r\n                shouldAdd = false; \r\n            }\r\n            \r\n            // Number of lights that are on. \r\n            let sum = 0; \r\n            for (let i = 0; i < lights.length; i++) {\r\n                let light = lights[i];\r\n                if (light.isOn(LIGHT_TYPE.TOP)) {\r\n                    sum += 1; \r\n                }\r\n                if (light.isOn(LIGHT_TYPE.BOTTOM)) {\r\n                    sum += 1; \r\n                }\r\n            }\r\n\r\n            // Time that has elapsed. \r\n            let elapsedTime = Date.now() - this.curTime; \r\n            let v = this.p5.sin(elapsedTime /(sum)); \r\n            let mapped =  this.p5.map(v, -1, 1, 0, 0.25);\r\n            \r\n            // Calculate the new bpm. \r\n            this.curBpm = shouldAdd ? (this.curBpm + mapped) : (this.curBpm - mapped); \r\n            \r\n            if (this.curBpm < MIN_BPM) {\r\n                this.curBpm = MIN_BPM; \r\n            } \r\n\r\n            if (this.curBpm > MAX_BPM) {\r\n                this.curBpm = MAX_BPM;\r\n            }\r\n\r\n            // Set BPM so all components can get the updates. \r\n            LightConfigStore.setBpm(Math.floor(this.curBpm));\r\n        } else {\r\n            // Keep snapshotting the time, so we can calculate\r\n            // the elapsed time. \r\n            this.curTime = Date.now(); \r\n        }\r\n    }\r\n}","/*\r\n  Name: WaveCanvas.js\r\n  Author: Amay Kataria\r\n  Date: 02/19/2022\r\n  Description: Class responsible to paint the interactive P5.js canvas.\r\n*/\r\n\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport {color} from './CommonStyles'\r\nimport p5 from 'p5'\r\nimport LightManager from './LightManager'\r\nimport MeshManager from './MeshManager'\r\nimport BpmManager from './BpmManager'\r\n\r\nvar sketch = (s) => {\r\n  let isUserInteracting = false;\r\n  let lightManager, meshManager, bpmManager;\r\n  s.setup = () => {\r\n    let canvasContainer = s.select('#canvasContainer');\r\n    let height = canvasContainer.height;\r\n    s.createCanvas(window.innerWidth, height);\r\n\r\n    lightManager = new LightManager(s);\r\n    meshManager = new MeshManager(s);\r\n    bpmManager = new BpmManager(s); \r\n    lightManager.setup();\r\n  };\r\n\r\n  s.draw = () => {\r\n    s.background(s.color(0, 0, 0));  \r\n    lightManager.draw(isUserInteracting, meshManager.ellipsePos, meshManager.boundaryWidth);\r\n    s.drawCenterLine();\r\n    meshManager.draw(isUserInteracting, lightManager.lights); \r\n    bpmManager.update(isUserInteracting, meshManager.ellipsePos, lightManager.lights);\r\n  };\r\n\r\n  s.drawCenterLine = () => {\r\n    // Draw a center line. \r\n    s.stroke(\"black\")\r\n    s.strokeWeight(6)\r\n    s.line(0, s.height/2, s.width, s.height/2)\r\n  };\r\n\r\n  s.mousePressed = () => {\r\n    if (s.mouseY > s.height || s.mouseY < 0) {\r\n      // Ignore. \r\n    } else {\r\n      isUserInteracting = true; \r\n    }\r\n  };\r\n\r\n  s.mouseReleased = () => {\r\n    isUserInteracting = false; \r\n  };\r\n};\r\n\r\n// s.windowResized = () => {\r\n//   let height = 0.95 * window.innerHeight;\r\n//   s.resizeCanvas(window.innerWidth, height); \r\n// }\r\n\r\nconst styles = {\r\n  // TODO: Is this height logic going to scale?\r\n  container: {\r\n    backgroundColor: color.bgBlack,\r\n    height: '82vh',\r\n    margin: 0,\r\n    padding: 0\r\n  }\r\n};\r\n\r\nclass WaveCanvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);   \r\n    this.containerRef = React.createRef();\r\n    this.sketchRef = React.createRef(); \r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('Wave canvas mounted');    \r\n    this.myP5 = new p5(sketch, this.sketchRef.current);\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={'canvasContainer'} \r\n        ref={this.sketchRef} \r\n        style={styles.container}>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Radium(WaveCanvas);","/*\r\n  Name: BottomBar.js\r\n  Author: Amay Kataria\r\n  Date: 02/19/2022\r\n  Description: React component for the bottom bar on the page. This has the send button. \r\n*/\r\nimport React from 'react'\r\nimport Radium from 'radium'\r\nimport {color, fontFamily, fontSize, padding} from './CommonStyles'\r\nimport Websocket from './Websocket';\r\nimport LightConfigStore from '../stores/LightConfigStore';\r\n\r\nconst styles = {\r\n    container: {\r\n        position: 'absolute',\r\n        height: '8vh',\r\n        left: '0',\r\n        right: '0',\r\n        bottom: '0',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingLeft: padding.small,\r\n        paddingRight: padding.small,\r\n        // // // Common Styles\r\n        color: color.fbWhite,\r\n        fontFamily: fontFamily.josefin,\r\n        fontSize: fontSize.lessBig,\r\n        letterSpacing: '2px'\r\n    },\r\n\r\n    info: {\r\n        backgroundColor: color.bgBlack,\r\n        padding: padding.verySmall,\r\n    }\r\n};\r\n\r\nclass BottomBar extends React.Component {\r\n  constructor(props) {\r\n    super(props); \r\n    this.state={\r\n      bpm: '',\r\n      index: ''\r\n    }\r\n    LightConfigStore.subscribeInfo(this.onInfoUpdate.bind(this));\r\n  }\r\n \r\n  render() {\r\n    let bpm = this.state.bpm + 'bpm'\r\n    let states = '#' + this.state.index; \r\n    return (\r\n        <div style={styles.container}>\r\n            <div style={styles.info}>{states}</div>\r\n            <div style={styles.info}>{bpm}</div>\r\n            <div onClick={this.onSend.bind(this)} style={styles.info}>Send</div>\r\n        </div>      \r\n    );\r\n  }\r\n\r\n  onInfoUpdate() {\r\n    let idx = LightConfigStore.getConfigIndex();\r\n    let bpm = LightConfigStore.getBpm(); \r\n    this.setState({\r\n      index: idx + 1, \r\n      bpm: bpm\r\n    });\r\n  }\r\n\r\n  onSend(event) {\r\n    event.stopPropagation();\r\n    Websocket.commitLightConfigData();\r\n  }\r\n}\r\n\r\nexport default Radium(BottomBar);","/*\n  Name: App.js\n  Author: Amay Kataria\n  Date: 02/19/2022\n  Description: Entry point component for the application. \n*/\n\nimport React from 'react'\nimport Radium from 'radium'\nimport Websocket from './Websocket'\n\nimport Navbar from './Navbar';\nimport WaveCanvas from './WaveCanvas';\nimport BottomBar from './BottomBar';\n\nconst styles = {\n  container: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    color: 'white',\n    height: '100vh'\n  },\n\n  button: {\n    width: '100px',\n    height: '50px',\n    backgroundColor: 'white',\n    color: 'black'\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); \n    window.addEventListener('resize', this.handleResize.bind(this));\n    this.state = {\n      isLandscape: this.isLandscape(),\n      isPortrait: this.isPortrait()\n    }; \n  }\n\n  render() {\n    return (\n      <div style={styles.container}>\n        <Navbar />\n        <WaveCanvas />\n        <BottomBar />\n      </div>\n    );\n  }\n\n  onClick(event) {\n    event.stopPropagation();\n    Websocket.saveEntry();\n    // Fire some data for the websocket. \n  }\n\n  handleResize() {\n    console.log('Resize triggered');\n    this.setState({\n      isLandscape: this.isLandscape(),\n      isPortrait: this.isPortrait()\n    });\n  }\n\n  isLandscape() {\n      let t = (window.innerHeight < window.innerWidth); \n      if (t) {\n        console.log('App: Landscape'); \n      }\n\n      return t; \n  }\n\n  isPortrait() {\n    let t = (window.innerHeight > window.innerWidth);\n    if (t) {\n      console.log('App: Portrait'); \n    }\n\n    return t; \n  }\n}\n\nexport default Radium(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './font/stylesheet.css';\nimport App from './components/App';\nimport {StyleRoot} from 'radium'\n\n// Use StyleRoot to enable keyframes and media queries for Javascript type\n// styles with Radium in components. \n// Single render function for the entire application. \nReactDOM.render(<StyleRoot><App /></StyleRoot>, document.getElementById('root'));"],"sourceRoot":""}